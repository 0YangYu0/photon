#--------------------------------------------------------------------------------------------------#

profile.fancy = INFO=0 SHADOW_QUALITY=SHADOW_QUALITY_FANCY
profile.fast  = INFO=1 SHADOW_QUALITY=SHADOW_QUALITY_FAST

screen = INFO <profile> <empty> [atmos] [light] [post] [terrain] [water] [misc]
screen.columns = 1

	screen.atmos = [clouds] [fog] [sky] [weather] <empty> SEA_LEVEL WORLD_TIME_ANIMATION MOON_PHASE_AFFECTS_BRIGHTNESS
	screen.atmos.columns = 1

		screen.clouds = [cloudsLayer0] [cloudsLayer1] [cloudsLayer2] [cloudsLayer3] <empty> CLOUDS_UPSCALING_FACTOR CLOUDS_SCALE
		screen.clouds.columns = 1

			screen.cloudsLayer0 = CLOUDS_LAYER0 CLOUDS_LAYER0_SHADOW CLOUDS_LAYER0_PRIMARY_STEPS CLOUDS_LAYER0_LIGHTING_STEPS CLOUDS_LAYER0_ALTITUDE CLOUDS_LAYER0_THICKNESS CLOUDS_LAYER0_COVERAGE CLOUDS_LAYER0_FREQUENCY CLOUDS_LAYER0_WEATHER_INFLUENCE CLOUDS_LAYER0_DENSITY CLOUDS_LAYER0_STRATUS_AMOUNT CLOUDS_LAYER0_CUMULUS_HUMILIS_AMOUNT CLOUDS_LAYER0_WIND_SPEED CLOUDS_LAYER0_WIND_ANGLE
			screen.cloudsLayer1 = CLOUDS_LAYER1 CLOUDS_LAYER1_SHADOW CLOUDS_LAYER1_PRIMARY_STEPS CLOUDS_LAYER1_LIGHTING_STEPS CLOUDS_LAYER1_ALTITUDE CLOUDS_LAYER1_THICKNESS CLOUDS_LAYER1_COVERAGE CLOUDS_LAYER1_FREQUENCY CLOUDS_LAYER1_WEATHER_INFLUENCE CLOUDS_LAYER1_DENSITY CLOUDS_LAYER1_STRATUS_AMOUNT CLOUDS_LAYER1_CUMULUS_HUMILIS_AMOUNT CLOUDS_LAYER1_WIND_SPEED CLOUDS_LAYER1_WIND_ANGLE
			screen.cloudsLayer2 = CLOUDS_LAYER2 <empty> CLOUDS_LAYER2_MODE CLOUDS_LAYER2_SHADOW CLOUDS_LAYER2_PRIMARY_STEPS CLOUDS_LAYER2_LIGHTING_STEPS CLOUDS_LAYER2_ALTITUDE CLOUDS_LAYER2_THICKNESS CLOUDS_LAYER2_COVERAGE CLOUDS_LAYER2_FREQUENCY CLOUDS_LAYER2_WEATHER_INFLUENCE CLOUDS_LAYER2_DENSITY CLOUDS_LAYER2_CIRRUS_AMOUNT CLOUDS_LAYER2_CIRROCUMULUS_AMOUNT CLOUDS_LAYER2_STRATUS_AMOUNT CLOUDS_LAYER2_CUMULUS_HUMILIS_AMOUNT CLOUDS_LAYER2_WIND_SPEED CLOUDS_LAYER2_WIND_ANGLE
			screen.cloudsLayer3 = CLOUDS_LAYER3 <empty> CLOUDS_LAYER3_MODE CLOUDS_LAYER3_SHADOW CLOUDS_LAYER3_PRIMARY_STEPS CLOUDS_LAYER3_LIGHTING_STEPS CLOUDS_LAYER3_ALTITUDE CLOUDS_LAYER3_THICKNESS CLOUDS_LAYER3_COVERAGE CLOUDS_LAYER3_FREQUENCY CLOUDS_LAYER3_WEATHER_INFLUENCE CLOUDS_LAYER3_DENSITY CLOUDS_LAYER3_CIRRUS_AMOUNT CLOUDS_LAYER3_CIRROCUMULUS_AMOUNT CLOUDS_LAYER3_STRATUS_AMOUNT CLOUDS_LAYER3_CUMULUS_HUMILIS_AMOUNT CLOUDS_LAYER3_WIND_SPEED CLOUDS_LAYER3_WIND_ANGLE

		screen.fog = BORDER_FOG CAVE_FOG BLOOMY_FOG BLOOMY_FOG_INTENSITY
		screen.fog.columns = 1

		screen.sky = HIDE_PLANET_SURFACE  <empty> VANILLA_SUN VANILLA_MOON SUN_ANGULAR_RADIUS MOON_ANGULAR_RADIUS <empty> STARS_COVERAGE STARS_INTENSITY
		screen.sky.columns = 1

		screen.weather = DYNAMIC_WEATHER LIGHTNING_FLASHES DESERT_SANDSTORM WEATHER_CLOUD_COVERAGE_INFLUENCE WEATHER_FOG_INFLUENCE WEATHER_VARIATION_SPEED WEATHER_TEMPERATURE_BIAS WEATHER_HUMIDITY_BIAS WEATHER_WIND_STRENGTH_BIAS
		screen.weather.columns = 1

	screen.light = [gtao] [lightSources] [shadows]
	screen.light.columns = 1

		screen.gtao = GTAO <empty> GTAO_RADIUS GTAO_SLICES GTAO_HORIZON_STEPS GTAO_ACCUMULATION_LIMIT <empty> SH_SKYLIGHT
		screen.gtao.columns = 1

		screen.lightSources = SUNLIGHT_INTENSITY [sunlightTint] MOONLIGHT_INTENSITY [moonlightTint] BLOCKLIGHT_INTENSITY BLOCKLIGHT_TEMPERATURE AMBIENT_LIGHT_INTENSITY [ambientLightTint]

			screen.sunlightTint = SUNLIGHT_TINT_R SUNLIGHT_TINT_G SUNLIGHT_TINT_B
			screen.sunlightTint.columns = 1

			screen.moonlightTint = MOONLIGHT_TINT_R MOONLIGHT_TINT_G MOONLIGHT_TINT_B
			screen.moonlightTint.columns = 1

			screen.ambientLightTint = AMBIENT_LIGHT_TINT_R AMBIENT_LIGHT_TINT_G AMBIENT_LIGHT_TINT_B
			screen.ambientLightTint.columns = 1

		screen.shadows = SHADOW SHADOW_QUALITY shadowMapResolution shadowDistance sunPathRotation SHADOW_PENUMBRA_SCALE SHADOW_COLOR CLOUD_SHADOWS ENTITY_SHADOWS BLOCK_ENTITY_SHADOWS

	screen.post = [camera] [color] [imageQuality]
	screen.post.columns = 1

		screen.camera = [bloom] [exposure]
		screen.camera.columns = 1

			screen.bloom = BLOOM <empty> BLOOM_INTENSITY BLOOM_RADIUS BLOOM_TILES BLOOM_UPSAMPLING_FILTER
			screen.bloom.columns = 1

			screen.exposure = CAMERA_LOCAL_EXPOSURE CAMERA_EXPOSURE_BIAS CAMERA_EXPOSURE_MIN CAMERA_EXPOSURE_MAX CAMERA_EXPOSURE_RATE_DIM_TO_BRIGHT CAMERA_EXPOSURE_RATE_BRIGHT_TO_DIM <empty> <empty> HISTOGRAM_IGNORE_DIM HISTOGRAM_IGNORE_BRIGHT <empty> <empty> CAMERA_MANUAL_EXPOSURE CAMERA_MANUAL_EXPOSURE_VALUE

			screen.temporal = TAA TAA_BLEND_WEIGHT TAA_VARIANCE_CLIPPING TAA_SKIP_CLIPPING TAA_OFFCENTER_REJECTION TAA_FLICKER_REDUCTION

			screen.colorGrading =  GRADE <empty> GRADE_BRIGHTNESS GRADE_CONTRAST GRADE_SATURATION GRADE_VIBRANCE GRADE_WHITE_BALANCE
			screen.colorGrading.columns = 1

		screen.color = [colorGrading] <empty> tonemap PURKINJE_SHIFT_INTENSITY
		screen.color.columns = 1

		screen.imageQuality = [temporal] <empty> TAA_UPSCALING_FACTOR FXAA CAS
		screen.imageQuality.columns = 1

	screen.terrain = [reflections] [wavingBlocks] <empty> TEXTURE_FORMAT NORMAL_MAP SPECULAR_MAP RAIN_PUDDLES
	screen.terrain.columns = 1

		screen.reflections = SSR SSR_ROUGH <empty> SSR_RAY_COUNT SSR_INTERSECTION_STEPS_SMOOTH SSR_INTERSECTION_STEPS_ROUGH SSR_REFINEMENT_STEPS SSR_ROUGHNESS_THRESHOLD
		screen.reflections.columns = 1

	    screen.wavingBlocks = WAVING_PLANTS WAVING_LEAVES
		screen.wavingBlocks.columns = 1

	screen.water = [waterWaves] [waterFog] <empty> WATER_CAUSTICS WATER_REFRACTION WATER_TEXTURE
	screen.water.columns = 1

		screen.waterWaves =

		screen.waterFog = WATER_DENSITY WATER_SCATTERING_COEFF WATER_ABSORPTION_R WATER_ABSORPTION_G WATER_ABSORPTION_B
		screen.waterFog.columns = 1

	screen.misc = DEBUG_VIEW DEBUG_SAMPLER DEBUG_SAMPLER_EXPOSURE CAMERA_LOCAL_EXPOSURE_COMPARISON
	screen.misc.columns = 1

sliders = CLOUDS_UPSCALING_FACTOR CLOUDS_SCALE SEA_LEVEL STARS_COVERAGE shadowMapResolution shadowDistance sunPathRotation SHADOW_PENUMBRA_SCALE DEBUG_SAMPLER_EXPOSURE STARS_COVERAGE STARS_INTENSITY CAMERA_EXPOSURE_BIAS CAMERA_EXPOSURE_MIN CAMERA_EXPOSURE_MAX CAMERA_EXPOSURE_RATE_DIM_TO_BRIGHT CAMERA_EXPOSURE_RATE_BRIGHT_TO_DIM CAMERA_MANUAL_EXPOSURE_VALUE HISTOGRAM_IGNORE_DIM HISTOGRAM_IGNORE_BRIGHT BLOOM_INTENSITY BLOOM_RADIUS BLOOM_TILES GRADE_BRIGHTNESS GRADE_CONTRAST GRADE_SATURATION GRADE_VIBRANCE GRADE_GAMMA_CURVE GRADE_WHITE_BALANCE SUNLIGHT_INTENSITY SUNLIGHT_TINT_R SUNLIGHT_TINT_G SUNLIGHT_TINT_B MOONLIGHT_INTENSITY MOONLIGHT_TINT_R MOONLIGHT_TINT_G MOONLIGHT_TINT_B BLOCKLIGHT_INTENSITY BLOCKLIGHT_TEMPERATURE AMBIENT_LIGHT_INTENSITY AMBIENT_LIGHT_TINT_R AMBIENT_LIGHT_TINT_G AMBIENT_LIGHT_TINT_B SUN_ANGULAR_RADIUS MOON_ANGULAR_RADIUS GTAO_RADIUS GTAO_SLICES GTAO_HORIZON_STEPS GTAO_ACCUMULATION_LIMIT BLOOMY_FOG_INTENSITY SSR_RAY_COUNT SSR_INTERSECTION_STEPS_SMOOTH SSR_INTERSECTION_STEPS_ROUGH SSR_REFINEMENT_STEPS SSR_ROUGHNESS_THRESHOLD WEATHER_VARIATION_SPEED WEATHER_CLOUD_COVERAGE_INFLUENCE WEATHER_FOG_INFLUENCE WEATHER_TEMPERATURE_BIAS WEATHER_HUMIDITY_BIAS WEATHER_WIND_STRENGTH_BIAS CLOUDS_LAYER0_PRIMARY_STEPS CLOUDS_LAYER0_LIGHTING_STEPS CLOUDS_LAYER0_ALTITUDE CLOUDS_LAYER0_THICKNESS CLOUDS_LAYER0_COVERAGE CLOUDS_LAYER0_FREQUENCY CLOUDS_LAYER0_WEATHER_INFLUENCE CLOUDS_LAYER0_DENSITY CLOUDS_LAYER0_STRATUS_AMOUNT CLOUDS_LAYER0_CUMULUS_HUMILIS_AMOUNT CLOUDS_LAYER0_WIND_SPEED CLOUDS_LAYER0_WIND_ANGLE CLOUDS_LAYER1_PRIMARY_STEPS CLOUDS_LAYER1_LIGHTING_STEPS CLOUDS_LAYER1_ALTITUDE CLOUDS_LAYER1_THICKNESS CLOUDS_LAYER1_COVERAGE CLOUDS_LAYER1_FREQUENCY CLOUDS_LAYER1_WEATHER_INFLUENCE CLOUDS_LAYER1_DENSITY CLOUDS_LAYER1_STRATUS_AMOUNT CLOUDS_LAYER1_CUMULUS_HUMILIS_AMOUNT CLOUDS_LAYER1_WIND_SPEED CLOUDS_LAYER1_WIND_ANGLE CLOUDS_LAYER2_PRIMARY_STEPS CLOUDS_LAYER2_LIGHTING_STEPS CLOUDS_LAYER2_ALTITUDE CLOUDS_LAYER2_THICKNESS CLOUDS_LAYER2_COVERAGE CLOUDS_LAYER2_FREQUENCY CLOUDS_LAYER2_WEATHER_INFLUENCE CLOUDS_LAYER2_DENSITY CLOUDS_LAYER2_CIRRUS_AMOUNT CLOUDS_LAYER2_CIRROCUMULUS_AMOUNT CLOUDS_LAYER2_STRATUS_AMOUNT CLOUDS_LAYER2_CUMULUS_HUMILIS_AMOUNT CLOUDS_LAYER2_WIND_SPEED CLOUDS_LAYER2_WIND_ANGLE CLOUDS_LAYER3_PRIMARY_STEPS CLOUDS_LAYER3_LIGHTING_STEPS CLOUDS_LAYER3_ALTITUDE CLOUDS_LAYER3_THICKNESS CLOUDS_LAYER3_COVERAGE CLOUDS_LAYER3_FREQUENCY CLOUDS_LAYER3_WEATHER_INFLUENCE CLOUDS_LAYER3_DENSITY CLOUDS_LAYER3_CIRRUS_AMOUNT CLOUDS_LAYER3_CIRROCUMULUS_AMOUNT CLOUDS_LAYER3_STRATUS_AMOUNT CLOUDS_LAYER3_CUMULUS_HUMILIS_AMOUNT CLOUDS_LAYER3_WIND_SPEED CLOUDS_LAYER3_WIND_ANGLE WATER_DENSITY WATER_SCATTERING_COEFF WATER_ABSORPTION_R WATER_ABSORPTION_G WATER_ABSORPTION_B PURKINJE_SHIFT_INTENSITY

#--------------------------------------------------------------------------------------------------#

clouds            = off
dynamicHandLight  = true
oldHandLight      = false
oldLighting       = false
separateAo        = true
underwaterOverlay = false
vignette          = false

#ifndef ENTITY_SHADOWS
shadowEntities = false
#endif

#ifndef BLOCK_ENTITY_SHADOWS
shadowBlockEntities = false
#endif

#----# Program Toggles #---------------------------------------------------------------------------#

program.world0/shadowcomp.enabled = SHADOW

#----# Blending #----------------------------------------------------------------------------------#

alphaTest.gbuffers_armor_glint  = off
alphaTest.gbuffers_basic        = off
alphaTest.gbuffers_damagedblock = off
alphaTest.gbuffers_entities     = off
alphaTest.gbuffers_hand         = off
alphaTest.gbuffers_hand_water   = off
alphaTest.gbuffers_spidereyes   = off
alphaTest.gbuffers_terrain      = off
alphaTest.gbuffers_textured     = off
alphaTest.gbuffers_skytextured  = off
alphaTest.gbuffers_water        = off
alphaTest.shadow                = off

blend.gbuffers_armor_glint  = off
blend.gbuffers_basic        = off
blend.gbuffers_damagedblock = off
blend.gbuffers_entities     = off
blend.gbuffers_hand         = off
blend.gbuffers_spidereyes   = off
blend.gbuffers_skytextured  = off
blend.gbuffers_terrain      = off
blend.shadow                = off

#----# Buffer Sizes #------------------------------------------------------------------------------#

# Sky capture
size.buffer.colortex4 = 256 128

# Bloom tiles
size.buffer.colortex15 = 960 1080

#if TAA_UPSCALING_FACTOR == 2
	# 0.71x width/height
	size.buffer.colortex3  = 0.7071 0.7071
	size.buffer.colortex5  = 0.7071 0.7071
	size.buffer.colortex6  = 0.7071 0.7071
	size.buffer.colortex7  = 0.7071 0.7071
	size.buffer.colortex10 = 0.7071 0.7071
	size.buffer.colortex11 = 0.7071 0.7071
	size.buffer.colortex12 = 0.7071 0.7071
	size.buffer.colortex13 = 0.7071 0.7071
#elif TAA_UPSCALING_FACTOR == 4
	# 0.5x width/height
	size.buffer.colortex3  = 0.5 0.5
	size.buffer.colortex5  = 0.5 0.5
	size.buffer.colortex6  = 0.5 0.5
	size.buffer.colortex7  = 0.5 0.5
	size.buffer.colortex10 = 0.5 0.5
	size.buffer.colortex11 = 0.5 0.5
	size.buffer.colortex12 = 0.5 0.5
	size.buffer.colortex13 = 0.5 0.5
#endif

#----# Custom Textures #---------------------------------------------------------------------------#

texture.noise = image/noise.png

# atmosphere lookup table
texture.deferred.colortex2 = image/atmosphere/scattering.dat TEXTURE_3D RGB16F 32 64 256 RGB HALF_FLOAT

# 3D noise for clouds
texture.deferred.depthtex0 = image/worley3D.dat TEXTURE_3D R8 64 64 64 RED UNSIGNED_BYTE
texture.deferred.depthtex2 = image/curl3D.dat TEXTURE_3D RGB8 32 32 32 RGB UNSIGNED_BYTE

# 3D noise for fog
texture.composite.colortex10 = image/worley3D.dat TEXTURE_3D R8 64 64 64 RED UNSIGNED_BYTE

#----# Custom Uniforms #---------------------------------------------------------------------------#

#if TAA_UPSCALING_FACTOR == 1
	variable.float.renderScale = 1.0
#elif TAA_UPSCALING_FACTOR == 2
	variable.float.renderScale = sqrt(0.5)
#elif TAA_UPSCALING_FACTOR == 4
	variable.float.renderScale = 0.5
#endif

uniform.vec2.windowSize = vec2(viewWidth, viewHeight)
uniform.vec2.windowTexelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

variable.float.viewSizeX = floor(viewWidth * renderScale)
variable.float.viewSizeY = floor(viewHeight * renderScale)

uniform.vec2.viewSize = vec2(viewSizeX, viewSizeY)
uniform.vec2.viewTexelSize = vec2(1.0 / viewSizeX, 1.0 / viewSizeY)

uniform.bool.cloudsMoonlit = between(worldTime, 12850, 23150)

# Jitter offsets from BSL, which are originally from Chocapic13
variable.float.frameMod8 = frameCounter % 8
uniform.vec2.taaOffset = vec2(         \
	(if(                               \
		frameMod8 == 0,  0.125, \
		frameMod8 == 1, -0.125, \
		frameMod8 == 2,  0.625, \
		frameMod8 == 3,  0.375, \
		frameMod8 == 4, -0.625, \
		frameMod8 == 5, -0.875, \
		frameMod8 == 6,  0.375, \
		frameMod8 == 7,  0.875, \
		0.0                            \
	) / viewSizeX),                    \
	(if(                               \
		frameMod8 == 0, -0.375, \
		frameMod8 == 1,  0.375, \
		frameMod8 == 2,  0.125, \
		frameMod8 == 3, -0.625, \
		frameMod8 == 4,  0.625, \
		frameMod8 == 5, -0.125, \
		frameMod8 == 6, -0.875, \
		frameMod8 == 7,  0.875, \
		0.0                            \
	) / viewSizeY)                    \
)

# Time uniforms

# World age in seconds, repeating every 128 days. This is used for animating atmospherics
uniform.float.worldAge = ((worldDay % 128) * 24000.0 + worldTime) / 20.0

# Detect whether world age has drastically changed since the last frame
variable.float.worldAgeDelta = abs(worldAge - smooth(worldAge, 0.1, 0.1))
uniform.bool.worldAgeChanged = worldAgeDelta > 20.0

# https://www.desmos.com/calculator/kniltwna7u
uniform.float.timeNoon     = max(1.0 - pow(1.0 - worldTime / 6000.0, 4.0), 0.0)
uniform.float.timeMidnight = max(1.0 - pow(3.0 - worldTime / 6000.0, 4.0), 0.0)
uniform.float.timeSunrise  = (1.0 - timeNoon) * (1.0 - timeMidnight) * if(between(worldTime, 6000, 18000), 0.0, 1.0)
uniform.float.timeSunset   = (1.0 - timeNoon) * (1.0 - timeMidnight) * if(between(worldTime, 6000, 18000), 1.0, 0.0)

# Biome uniforms

uniform.float.biomeCave   = smooth(clamp((63.0 - eyeAltitude) / (63.0 - 50.0), 0.0, 1.0) * (1.0 - eyeBrightness.y / 240.0), 5.0, 2.0)

uniform.float.biomeMayRain     = smooth(if(biome_precipitation != PPT_NONE, 1.0, 0.0), 30, 30)
uniform.float.biomeTemperature = smooth(temperature * 2.0 - 1.0, 1000, 1000)
uniform.float.biomeHumidity    = smooth(rainfall * 2.0 - 1.0, 1000, 1000)

#ifdef LIGHTNING_FLASHES
uniform.float.lightningFlash = smooth(if(equals(skyColor.r, skyColor.g, 0.01) && skyColor.r > 0.3, 1.0, 0.0), 0.0, 0.75)
#else
uniform.float.lightningFlash = 0.0
#endif

#ifdef DESERT_SANDSTORM
uniform.float.desertSandstorm = smooth(if(biome_precipitation == PPT_NONE, rainStrength, 0.0), 60.0, 30.0)
#else
uniform.float.desertSandstorm = 0.0
#endif

# Lighting uniforms

uniform.float.eyeBlocklight = smooth(eyeBrightness.x / 240.0, 1.0, 1.0)
uniform.float.eyeSkylight   = smooth(eyeBrightness.y / 240.0, 1.0, 1.0)

# for some god-forsaken reason, the OF uniform sunPosition and its friends, which are supposed to be
# given in view-space, are given in world-space when:
# - the blindness effect is active
# - the player is in the End (I ignore this case because I don't know a good way of detecting the current dimension from within shaders.properties. Several maps like to place end biomes in the Overworld for some reason, so checking biome_category is not an option)
# - the player is inside of powdered snow
# this is meant to work around that
variable.bool.worldOrientedCelestialUniforms = (blindness > 0.0) || (isEyeInWater == 3)

#ifdef MOON_PHASE_AFFECTS_BRIGHTNESS
uniform.float.moonPhaseBrightness = if( \
	moonPhase == 0, 1.0,                \
	moonPhase == 1, 0.8,               \
	moonPhase == 2, 0.6,                \
	moonPhase == 3, 0.4,               \
	moonPhase == 4, 0.2,              \
	moonPhase == 5, 0.4,               \
	moonPhase == 6, 0.6,                \
	moonPhase == 7, 0.8,               \
	1.0 \
) \
#else
uniform.float.moonPhaseBrightness = 1.0
#endif

variable.float.viewUpDirNorm = 1.0 / sqrt((upPosition.x * upPosition.x) + (upPosition.y * upPosition.y) + (upPosition.z * upPosition.z))
variable.float.viewUpDirX = upPosition.x * viewUpDirNorm
variable.float.viewUpDirY = upPosition.y * viewUpDirNorm
variable.float.viewUpDirZ = upPosition.z * viewUpDirNorm
uniform.vec3.viewUpDir = vec3(viewUpDirX, viewUpDirY, viewUpDirZ)

variable.float.sunDirViewNorm = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
variable.float.sunDirViewX = sunPosition.x * sunDirViewNorm
variable.float.sunDirViewY = sunPosition.y * sunDirViewNorm
variable.float.sunDirViewZ = sunPosition.z * sunDirViewNorm
uniform.vec3.sunDirView = vec3(sunDirViewX, sunDirViewY, sunDirViewZ)

variable.float.sunDirX = gbufferModelViewInverse.0.0 * sunDirViewX + gbufferModelViewInverse.1.0 * sunDirViewY + gbufferModelViewInverse.2.0 * sunDirViewZ
variable.float.sunDirY = gbufferModelViewInverse.0.1 * sunDirViewX + gbufferModelViewInverse.1.1 * sunDirViewY + gbufferModelViewInverse.2.1 * sunDirViewZ
variable.float.sunDirZ = gbufferModelViewInverse.0.2 * sunDirViewX + gbufferModelViewInverse.1.2 * sunDirViewY + gbufferModelViewInverse.2.2 * sunDirViewZ
uniform.vec3.sunDir = vec3(if(worldOrientedCelestialUniforms, sunDirViewX, sunDirX), if(worldOrientedCelestialUniforms, sunDirViewY, sunDirY), if(worldOrientedCelestialUniforms, sunDirViewZ, sunDirZ))

variable.float.moonDirViewNorm = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
variable.float.moonDirViewX = moonPosition.x * moonDirViewNorm
variable.float.moonDirViewY = moonPosition.y * moonDirViewNorm
variable.float.moonDirViewZ = moonPosition.z * moonDirViewNorm
uniform.vec3.moonDirView = vec3(moonDirViewX, moonDirViewY, moonDirViewZ)

variable.float.moonDirX = gbufferModelViewInverse.0.0 * moonDirViewX + gbufferModelViewInverse.1.0 * moonDirViewY + gbufferModelViewInverse.2.0 * moonDirViewZ
variable.float.moonDirY = gbufferModelViewInverse.0.1 * moonDirViewX + gbufferModelViewInverse.1.1 * moonDirViewY + gbufferModelViewInverse.2.1 * moonDirViewZ
variable.float.moonDirZ = gbufferModelViewInverse.0.2 * moonDirViewX + gbufferModelViewInverse.1.2 * moonDirViewY + gbufferModelViewInverse.2.2 * moonDirViewZ
uniform.vec3.moonDir = vec3(if(worldOrientedCelestialUniforms, moonDirViewX, moonDirX), if(worldOrientedCelestialUniforms, moonDirViewY, moonDirY), if(worldOrientedCelestialUniforms, moonDirViewZ, moonDirZ))

variable.float.lightDirViewX = if(sunAngle < 0.5, sunDirViewX, moonDirViewX)
variable.float.lightDirViewY = if(sunAngle < 0.5, sunDirViewY, moonDirViewY)
variable.float.lightDirViewZ = if(sunAngle < 0.5, sunDirViewZ, moonDirViewZ)
uniform.vec3.lightDirView = vec3(lightDirViewX, lightDirViewY, lightDirViewZ)

variable.float.lightDirX = if(sunAngle < 0.5, sunDirX, moonDirX)
variable.float.lightDirY = if(sunAngle < 0.5, sunDirY, moonDirY)
variable.float.lightDirZ = if(sunAngle < 0.5, sunDirZ, moonDirZ)
uniform.vec3.lightDir    = vec3(if(worldOrientedCelestialUniforms, lightDirViewX, lightDirX), if(worldOrientedCelestialUniforms, lightDirViewY, lightDirY), if(worldOrientedCelestialUniforms, lightDirViewZ, lightDirZ))
