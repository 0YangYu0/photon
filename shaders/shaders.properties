profile.low    = INFO=0 shadowMapResolution=1024 !SHADOW_PCF !SHADOW_COLOR !SHADOW_VPS !ENTITY_SHADOWS !BLOCK_ENTITY_SHADOWS !GTAO !VL !AIR_FOG_COLORED_LIGHT_SHAFTS
profile.medium = INFO=1 shadowMapResolution=2048  SHADOW_PCF !SHADOW_COLOR  SHADOW_VPS !ENTITY_SHADOWS !BLOCK_ENTITY_SHADOWS !GTAO VL !AIR_FOG_COLORED_LIGHT_SHAFTS
profile.high   = INFO=2 shadowMapResolution=2048  SHADOW_PCF  SHADOW_COLOR  SHADOW_VPS  ENTITY_SHADOWS !BLOCK_ENTITY_SHADOWS  GTAO VL !AIR_FOG_COLORED_LIGHT_SHAFTS
profile.ultra  = INFO=3 shadowMapResolution=4096  SHADOW_PCF  SHADOW_COLOR  SHADOW_VPS  ENTITY_SHADOWS  BLOCK_ENTITY_SHADOWS  GTAO VL  AIR_FOG_COLORED_LIGHT_SHAFTS

#--------------------------------------------------------------------------------------------------#

screen              = INFO <profile> <empty> <empty> [world] [lighting] [sky] [fog] [materials] [water] [post] [misc]

screen.world        = WAVING_PLANTS WAVING_LEAVES SEA_LEVEL
screen.lighting     = [shadows] <empty> <empty> <empty> GTAO VANILLA_AO SH_SKYLIGHT
screen.sky          = VANILLA_SUN VANILLA_MOON SUN_ANGULAR_RADIUS MOON_ANGULAR_RADIUS SKY_GROUND STARS STARS_INTENSITY STARS_COVERAGE
screen.fog          = VL VL_RENDER_SCALE AIR_FOG_CLOUDY_NOISE AIR_FOG_COLORED_LIGHT_SHAFTS <empty> <empty> [fog_rlh] [fog_mie] <empty> <empty> BORDER_FOG CAVE_FOG BLOOMY_FOG BLOOMY_FOG_INTENSITY
screen.materials    = NORMAL_MAPPING SPECULAR_MAPPING TEXTURE_FORMAT HARDCODED_SPECULAR HARDCODED_EMISSION HARDCODED_SSS
screen.water        =
screen.post         = [color_grading] [exposure] BLOOM BLOOM_INTENSITY DOF DOF_INTENSITY DOF_SAMPLES DOF_FOCUS TAA FXAA TAAU TAAU_RENDER_SCALE CAS CAS_INTENSITY VIGNETTE VIGNETTE_INTENSITY
screen.misc         = DEBUG_VIEW DEBUG_SAMPLER WHITE_WORLD TONEMAP_COMPARISON tonemap_left tonemap_right

screen.shadows      = SHADOW SHADOW_PCF SHADOW_COLOR SHADOW_VPS shadowMapResolution shadowDistance sunPathRotation SHADOW_PENUMBRA_SCALE ENTITY_SHADOWS BLOCK_ENTITY_SHADOWS
screen.color_grading = tonemap <empty> <empty> <empty> GRADE_BRIGHTNESS GRADE_CONTRAST GRADE_SATURATION GRADE_WHITE_BALANCE GRADE_ORANGE_SAT_BOOST GRADE_TEAL_SAT_BOOST GRADE_GREEN_SAT_BOOST GRADE_GREEN_HUE_SHIFT <empty> <empty> PURKINJE_SHIFT PURKINJE_SHIFT_INTENSITY
screen.exposure     = AUTO_EXPOSURE AUTO_EXPOSURE_BIAS AUTO_EXPOSURE_MIN AUTO_EXPOSURE_MAX AUTO_EXPOSURE_RATE_DIM_TO_BRIGHT AUTO_EXPOSURE_RATE_BRIGHT_TO_DIM <empty> <empty> MANUAL_EXPOSURE_VALUE MANUAL_EXPOSURE_USE_SCREEN_BRIGHTNESS <empty> <empty> HISTOGRAM_BINS HISTOGRAM_TARGET

screen.fog_rlh = AIR_FOG_RAYLEIGH_DENSITY [fog_rlh_normal] AIR_FOG_RAYLEIGH_DENSITY_RAIN [fog_rlh_rain] AIR_FOG_RAYLEIGH_DENSITY_ARID [fog_rlh_arid] AIR_FOG_RAYLEIGH_DENSITY_SNOWY [fog_rlh_snowy] AIR_FOG_RAYLEIGH_DENSITY_TAIGA [fog_rlh_taiga] AIR_FOG_RAYLEIGH_DENSITY_JUNGLE [fog_rlh_jungle] AIR_FOG_RAYLEIGH_DENSITY_SWAMP [fog_rlh_swamp]
screen.fog_mie = AIR_FOG_MIE_DENSITY_MORNING AIR_FOG_MIE_DENSITY_NOON AIR_FOG_MIE_DENSITY_EVENING AIR_FOG_MIE_DENSITY_MIDNIGHT AIR_FOG_MIE_DENSITY_RAIN AIR_FOG_MIE_DENSITY_BLUE_HOUR

screen.fog_rlh_normal = AIR_FOG_RAYLEIGH_R AIR_FOG_RAYLEIGH_G AIR_FOG_RAYLEIGH_B
screen.fog_rlh_rain   = AIR_FOG_RAYLEIGH_R_RAIN AIR_FOG_RAYLEIGH_G_RAIN AIR_FOG_RAYLEIGH_B_RAIN
screen.fog_rlh_arid   = AIR_FOG_RAYLEIGH_R_ARID AIR_FOG_RAYLEIGH_G_ARID AIR_FOG_RAYLEIGH_B_ARID
screen.fog_rlh_snowy  = AIR_FOG_RAYLEIGH_R_SNOWY AIR_FOG_RAYLEIGH_G_SNOWY AIR_FOG_RAYLEIGH_B_SNOWY
screen.fog_rlh_taiga  = AIR_FOG_RAYLEIGH_R_TAIGA AIR_FOG_RAYLEIGH_G_TAIGA AIR_FOG_RAYLEIGH_B_TAIGA
screen.fog_rlh_jungle = AIR_FOG_RAYLEIGH_R_JUNGLE AIR_FOG_RAYLEIGH_G_JUNGLE AIR_FOG_RAYLEIGH_B_JUNGLE
screen.fog_rlh_swamp  = AIR_FOG_RAYLEIGH_R_SWAMP AIR_FOG_RAYLEIGH_G_SWAMP AIR_FOG_RAYLEIGH_B_SWAMP

# Columns
screen.fog_rlh_normal.columns = 1
screen.fog_rlh_rain.columns   = 1
screen.fog_rlh_arid.columns   = 1
screen.fog_rlh_snowy.columns  = 1
screen.fog_rlh_taiga.columns  = 1
screen.fog_rlh_jungle.columns = 1
screen.fog_rlh_swamp.columns  = 1

# Sliders
sliders = TAAU_RENDER_SCALE CAS_INTENSITY VIGNETTE_INTENSITY PURKINJE_SHIFT_INTENSITY GRADE_BRIGHTNESS GRADE_CONTRAST GRADE_SATURATION GRADE_WHITE_BALANCE GRADE_ORANGE_SAT_BOOST GRADE_TEAL_SAT_BOOST GRADE_GREEN_SAT_BOOST GRADE_GREEN_HUE_SHIFT shadowMapResolution shadowDistance sunPathRotation SHADOW_PENUMBRA_SCALE AUTO_EXPOSURE_BIAS AUTO_EXPOSURE_MIN AUTO_EXPOSURE_MAX AUTO_EXPOSURE_RATE_DIM_TO_BRIGHT AUTO_EXPOSURE_RATE_BRIGHT_TO_DIM MANUAL_EXPOSURE_VALUE HISTOGRAM_BINS HISTOGRAM_TARGET AIR_FOG_RAYLEIGH_DENSITY AIR_FOG_RAYLEIGH_R AIR_FOG_RAYLEIGH_G AIR_FOG_RAYLEIGH_B AIR_FOG_RAYLEIGH_DENSITY_RAIN AIR_FOG_RAYLEIGH_R_RAIN AIR_FOG_RAYLEIGH_G_RAIN AIR_FOG_RAYLEIGH_B_RAIN AIR_FOG_RAYLEIGH_DENSITY_ARID AIR_FOG_RAYLEIGH_R_ARID AIR_FOG_RAYLEIGH_G_ARID AIR_FOG_RAYLEIGH_B_ARID AIR_FOG_RAYLEIGH_DENSITY_SNOWY AIR_FOG_RAYLEIGH_R_SNOWY AIR_FOG_RAYLEIGH_G_SNOWY AIR_FOG_RAYLEIGH_B_SNOWY AIR_FOG_RAYLEIGH_DENSITY_TAIGA AIR_FOG_RAYLEIGH_R_TAIGA AIR_FOG_RAYLEIGH_G_TAIGA AIR_FOG_RAYLEIGH_B_TAIGA AIR_FOG_RAYLEIGH_DENSITY_JUNGLE AIR_FOG_RAYLEIGH_R_JUNGLE AIR_FOG_RAYLEIGH_G_JUNGLE AIR_FOG_RAYLEIGH_B_JUNGLE AIR_FOG_RAYLEIGH_DENSITY_SWAMP AIR_FOG_RAYLEIGH_R_SWAMP AIR_FOG_RAYLEIGH_G_SWAMP AIR_FOG_RAYLEIGH_B_SWAMP BLOOM_INTENSITY DOF_INTENSITY DOF_SAMPLES DOF_FOCUS AIR_FOG_MIE_DENSITY_MORNING AIR_FOG_MIE_DENSITY_NOON AIR_FOG_MIE_DENSITY_RAIN AIR_FOG_MIE_DENSITY_BLUE_HOUR AIR_FOG_MIE_DENSITY_EVENING AIR_FOG_MIE_DENSITY_MIDNIGHT VL_RENDER_SCALE BLOOMY_FOG_INTENSITY SUN_ANGULAR_RADIUS MOON_ANGULAR_RADIUS STARS_INTENSITY STARS_COVERAGE SEA_LEVEL

#--------------------------------------------------------------------------------------------------#

clouds            = off
dynamicHandLight  = true
oldHandLight      = false
oldLighting       = false
separateAo        = true
underwaterOverlay = false
vignette          = false

#ifndef ENTITY_SHADOWS
shadowEntities = false
#endif

#ifndef BLOCK_ENTITY_SHADOWS
shadowBlockEntities = false
#endif

# -------------------
#   Program Toggles
# -------------------

program.world0/composite.enabled   = VL
program.world0/composite3.enabled  = TAAU
program.world0/composite2.enabled  = DOF
program.world0/composite5.enabled  = BLOOM
program.world0/composite6.enabled  = BLOOM
program.world0/composite7.enabled  = BLOOM
program.world0/composite8.enabled  = BLOOM
program.world0/composite9.enabled  = BLOOM
program.world0/composite10.enabled = BLOOM
program.world0/composite11.enabled = BLOOM
program.world0/composite12.enabled = BLOOM
program.world0/composite13.enabled = BLOOM
program.world0/composite15.enabled = FXAA

# ----------------
#   Buffer Flips
# ----------------

flip.deferred2.colortex5 = true

#ifdef VL
flip.composite1.colortex5 = true
flip.composite1.colortex6 = true
#endif

#ifdef TAAU
flip.composite4.colortex6 = true
flip.composite4.colortex7 = true
#endif

# ----------------
#   Buffer Sizes
# ----------------

size.buffer.colortex4 = 192 108

# ------------
#   Blending
# ------------

alphaTest.gbuffers_armor_glint  = off
alphaTest.gbuffers_basic        = off
alphaTest.gbuffers_block        = off
alphaTest.gbuffers_damagedblock = off
alphaTest.gbuffers_entities     = off
alphaTest.gbuffers_hand         = off
alphaTest.gbuffers_hand_water   = off
alphaTest.gbuffers_spidereyes   = off
alphaTest.gbuffers_terrain      = off
alphaTest.gbuffers_textured     = off
alphaTest.gbuffers_water        = off
alphaTest.shadow                = off

blend.gbuffers_armor_glint  = off
blend.gbuffers_basic        = off
blend.gbuffers_block        = off
blend.gbuffers_damagedblock = off
blend.gbuffers_entities     = off
blend.gbuffers_hand         = off
blend.gbuffers_hand_water   = off
blend.gbuffers_spidereyes   = off
blend.gbuffers_skytextured  = off
blend.gbuffers_terrain      = off
blend.gbuffers_textured     = off
blend.gbuffers_water        = off
blend.shadow                = off


blend.gbuffers_hand_water.colortex3 = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_textured.colortex3   = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_water.colortex3      = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO

# -------------------
#   Custom Textures
# -------------------

texture.noise = image/noise.png

# atmospheric scattering LUT
texture.deferred.depthtex0 = image/atmosphere/scattering.dat TEXTURE_3D RGB16F 32 64 32 RGB HALF_FLOAT

# 3D noise for clouds
texture.deferred.colortex6.1 = image/worley_noise.dat TEXTURE_3D R8 64 64 64 RED UNSIGNED_BYTE
texture.deferred.colortex7.1 = image/curl_noise.dat TEXTURE_3D RGB8 32 32 32 RGB UNSIGNED_BYTE

# 3D noise for fog
texture.composite.colortex3 = image/worley_noise.dat TEXTURE_3D R8 64 64 64 RED UNSIGNED_BYTE

# -------------------
#   Custom Uniforms
# -------------------

uniform.vec2.view_res = vec2(viewWidth, viewHeight)
uniform.vec2.view_pixel_size = vec2(1.0 / viewWidth, 1.0 / viewHeight)

# TAA jitter offset using R2 sequence
# http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/
variable.float.jitter_x = frac(1.3247179572 * frameCounter + 0.5) * 2.0 - 1.0
variable.float.jitter_y = frac(1.7548776662 * frameCounter + 0.5) * 2.0 - 1.0
uniform.vec2.taa_offset = vec2(jitter_x / viewWidth, jitter_y / viewWidth)

# Time uniforms

# World age in seconds, repeating every 128 days. This is used for animating atmospherics
uniform.float.world_age = ((worldDay % 128) * 24000.0 + worldTime) / 20.0

# Detect whether world age has drastically changed since the last frame
variable.float.world_age_delta = abs(world_age - smooth(world_age, 0.1, 0.1))
uniform.bool.world_age_changed = world_age_delta > 20.0

# https://www.desmos.com/calculator/kniltwna7u
uniform.float.time_noon      = max(1.0 - pow(abs(1.0 - worldTime / 6000.0), 5.0), 0.0)
uniform.float.time_midnight  = max(1.0 - pow(abs(3.0 - worldTime / 6000.0), 1.0), 0.0)
uniform.float.time_sunrise   = (1.0 - time_noon) * (1.0 - time_midnight) * if(between(worldTime, 6000, 18000), 0.0, 1.0)
uniform.float.time_sunset    = (1.0 - time_noon) * (1.0 - time_midnight) * if(between(worldTime, 6000, 18000), 1.0, 0.0)

# Biome uniforms

uniform.float.biome_cave        = smooth(clamp((63.0 - eyeAltitude) / (63.0 - 50.0), 0.0, 1.0) * (1.0 - eyeBrightness.y / 240.0), 5.0, 2.0)
uniform.float.biome_arid        = smooth(if(biome_category == CAT_DESERT || biome_category == CAT_MESA || biome_category == CAT_SAVANNA, 1.0, 0.0), 30, 30)
uniform.float.biome_snowy       = smooth(if(biome_category == CAT_ICY, 1.0, 0.0), 30, 30)
uniform.float.biome_taiga       = smooth(if(biome_category == CAT_TAIGA, 1.0, 0.0), 30, 30)
uniform.float.biome_jungle      = smooth(if(biome_category == CAT_JUNGLE, 1.0, 0.0), 30, 30)
uniform.float.biome_swamp       = smooth(if(biome_category == CAT_SWAMP, 1.0, 0.0), 30, 30)
uniform.float.biome_temperate   = 1.0 - biome_arid - biome_snowy - biome_taiga - biome_jungle - biome_swamp
uniform.float.biome_may_rain    = smooth(if(biome_precipitation == PPT_RAIN, 1.0, 0.0), 30, 30)
uniform.float.biome_temperature = smooth(temperature * 2.0 - 1.0, 1000, 1000)
uniform.float.biome_humidity    = smooth(rainfall * 2.0 - 1.0, 1000, 1000)

# Lighting uniforms

uniform.float.eye_blocklight = smooth(eyeBrightness.x / 240.0, 1.0, 1.0)
uniform.float.eye_skylight   = smooth(eyeBrightness.y / 240.0, 1.0, 1.0)

variable.float.view_up_dir_norm = 1.0 / sqrt((upPosition.x * upPosition.x) + (upPosition.y * upPosition.y) + (upPosition.z * upPosition.z))
variable.float.view_up_dir_x = upPosition.x * view_up_dir_norm
variable.float.view_up_dir_y = upPosition.y * view_up_dir_norm
variable.float.view_up_dir_z = upPosition.z * view_up_dir_norm
uniform.vec3.view_up_dir = vec3(view_up_dir_x, view_up_dir_y, view_up_dir_z)

variable.float.view_sun_dir_norm = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
variable.float.view_sun_dir_x = sunPosition.x * view_sun_dir_norm
variable.float.view_sun_dir_y = sunPosition.y * view_sun_dir_norm
variable.float.view_sun_dir_z = sunPosition.z * view_sun_dir_norm
uniform.vec3.view_sun_dir = vec3(view_sun_dir_x, view_sun_dir_y, view_sun_dir_z)

variable.float.sun_dir_x = gbufferModelViewInverse.0.0 * view_sun_dir_x + gbufferModelViewInverse.1.0 * view_sun_dir_y + gbufferModelViewInverse.2.0 * view_sun_dir_z
variable.float.sun_dir_y = gbufferModelViewInverse.0.1 * view_sun_dir_x + gbufferModelViewInverse.1.1 * view_sun_dir_y + gbufferModelViewInverse.2.1 * view_sun_dir_z
variable.float.sun_dir_z = gbufferModelViewInverse.0.2 * view_sun_dir_x + gbufferModelViewInverse.1.2 * view_sun_dir_y + gbufferModelViewInverse.2.2 * view_sun_dir_z
uniform.vec3.sun_dir = vec3(sun_dir_x, sun_dir_y, sun_dir_z)

variable.float.view_moon_dir_norm = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
variable.float.view_moon_dir_x = moonPosition.x * view_moon_dir_norm
variable.float.view_moon_dir_y = moonPosition.y * view_moon_dir_norm
variable.float.view_moon_dir_z = moonPosition.z * view_moon_dir_norm
uniform.vec3.view_moon_dir = vec3(view_moon_dir_x, view_moon_dir_y, view_moon_dir_z)

variable.float.moon_dir_x = gbufferModelViewInverse.0.0 * view_moon_dir_x + gbufferModelViewInverse.1.0 * view_moon_dir_y + gbufferModelViewInverse.2.0 * view_moon_dir_z
variable.float.moon_dir_y = gbufferModelViewInverse.0.1 * view_moon_dir_x + gbufferModelViewInverse.1.1 * view_moon_dir_y + gbufferModelViewInverse.2.1 * view_moon_dir_z
variable.float.moon_dir_z = gbufferModelViewInverse.0.2 * view_moon_dir_x + gbufferModelViewInverse.1.2 * view_moon_dir_y + gbufferModelViewInverse.2.2 * view_moon_dir_z
uniform.vec3.moon_dir = vec3(moon_dir_x, moon_dir_y, moon_dir_z)

variable.float.view_light_dir_x = if(sunAngle < 0.5, view_sun_dir_x, view_moon_dir_x)
variable.float.view_light_dir_y = if(sunAngle < 0.5, view_sun_dir_y, view_moon_dir_y)
variable.float.view_light_dir_z = if(sunAngle < 0.5, view_sun_dir_z, view_moon_dir_z)
uniform.vec3.view_light_dir = vec3(view_light_dir_x, view_light_dir_y, view_light_dir_z)

variable.float.light_dir_x = if(sunAngle < 0.5, sun_dir_x, moon_dir_x)
variable.float.light_dir_y = if(sunAngle < 0.5, sun_dir_y, moon_dir_y)
variable.float.light_dir_z = if(sunAngle < 0.5, sun_dir_z, moon_dir_z)
uniform.vec3.light_dir = vec3(light_dir_x, light_dir_y, light_dir_z)

# Cloud uniforms

uniform.vec2.clouds_coverage_cu = vec2(0.5, 0.5)

uniform.bool.clouds_moonlit = between(worldTime, 12850, 23150)

variable.float.clouds_light_dir_x = if(clouds_moonlit, moon_dir_x, sun_dir_x)
variable.float.clouds_light_dir_y = if(clouds_moonlit, moon_dir_y, sun_dir_y)
variable.float.clouds_light_dir_z = if(clouds_moonlit, moon_dir_z, sun_dir_z)
uniform.vec3.clouds_light_dir = vec3(clouds_light_dir_x, clouds_light_dir_y, clouds_light_dir_z)

variable.float.clouds_jitter_x = frac(1.3247179572 * (frameCounter + 93) + 0.5) * 0.5 - 0.5
variable.float.clouds_jitter_y = frac(1.7548776662 * (frameCounter + 93) + 0.5) * 0.5 - 0.5
uniform.vec2.clouds_offset = vec2(clouds_jitter_x / viewWidth, clouds_jitter_y / viewWidth)
