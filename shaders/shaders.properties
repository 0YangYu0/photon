profile.low    = INFO=0 shadowMapResolution=1024 !SHADOW_PCF !SHADOW_COLOR !SHADOW_VPS !ENTITY_SHADOWS !BLOCK_ENTITY_SHADOWS !GTAO !SH_SKYLIGHT !VOLUMETRIC_FOG !FOG_COLORED_LIGHT_SHAFTS
profile.medium = INFO=1 shadowMapResolution=2048  SHADOW_PCF !SHADOW_COLOR  SHADOW_VPS !ENTITY_SHADOWS !BLOCK_ENTITY_SHADOWS !GTAO !SH_SKYLIGHT  VOLUMETRIC_FOG !FOG_COLORED_LIGHT_SHAFTS
profile.high   = INFO=2 shadowMapResolution=2048  SHADOW_PCF  SHADOW_COLOR  SHADOW_VPS  ENTITY_SHADOWS !BLOCK_ENTITY_SHADOWS  GTAO  SH_SKYLIGHT  VOLUMETRIC_FOG !FOG_COLORED_LIGHT_SHAFTS
profile.ultra  = INFO=3 shadowMapResolution=4096  SHADOW_PCF  SHADOW_COLOR  SHADOW_VPS  ENTITY_SHADOWS  BLOCK_ENTITY_SHADOWS  GTAO  SH_SKYLIGHT  VOLUMETRIC_FOG  FOG_COLORED_LIGHT_SHAFTS

#--------------------------------------------------------------------------------------------------#

screen              = INFO <profile> <empty> <empty> [world] [lighting] [sky] [fog] [materials] [water] [post] [misc]

screen.world        =
screen.lighting     = [shadows] <empty> <empty> <empty> GTAO
screen.sky          =
screen.fog          = [fogRlh] [fogMie]
screen.materials    = NORMAL_MAPPING SPECULAR_MAPPING
screen.water        =
screen.post         = [colorGrading] [exposure] BLOOM BLOOM_INTENSITY TAA FXAA TAAU TAAU_RENDER_SCALE CAS CAS_INTENSITY VIGNETTE VIGNETTE_INTENSITY
screen.misc         = DEBUG_VIEW DEBUG_SAMPLER

screen.shadows      = SHADOW SHADOW_PCF SHADOW_COLOR SHADOW_VPS shadowMapResolution shadowDistance sunPathRotation SHADOW_PENUMBRA_SCALE ENTITY_SHADOWS BLOCK_ENTITY_SHADOWS
screen.colorGrading = tonemap <empty> <empty> <empty> GRADE_BRIGHTNESS GRADE_CONTRAST GRADE_SATURATION GRADE_ORANGE_SAT_BOOST GRADE_TEAL_SAT_BOOST GRADE_GREEN_SAT_BOOST GRADE_GREEN_HUE_SHIFT <empty> <empty> <empty> PURKINJE_SHIFT PURKINJE_SHIFT_INTENSITY
screen.exposure     = AUTO_EXPOSURE AUTO_EXPOSURE_BIAS AUTO_EXPOSURE_MIN AUTO_EXPOSURE_MAX AUTO_EXPOSURE_RATE_DIM_TO_BRIGHT AUTO_EXPOSURE_RATE_BRIGHT_TO_DIM <empty> <empty> MANUAL_EXPOSURE_VALUE MANUAL_EXPOSURE_USE_SCREEN_BRIGHTNESS <empty> <empty> HISTOGRAM_BINS HISTOGRAM_TARGET

screen.fogRlh       = FOG_RAYLEIGH_DENSITY [fogRlhNormal] FOG_RAYLEIGH_DENSITY_RAIN [fogRlhRain] FOG_RAYLEIGH_DENSITY_ARID [fogRlhArid] FOG_RAYLEIGH_DENSITY_SNOWY [fogRlhSnowy] FOG_RAYLEIGH_DENSITY_TAIGA [fogRlhTaiga] FOG_RAYLEIGH_DENSITY_JUNGLE [fogRlhJungle] FOG_RAYLEIGH_DENSITY_SWAMP [fogRlhSwamp]
screen.fogRlhNormal = FOG_RAYLEIGH_R FOG_RAYLEIGH_G FOG_RAYLEIGH_B
screen.fogRlhRain   = FOG_RAYLEIGH_R_RAIN FOG_RAYLEIGH_G_RAIN FOG_RAYLEIGH_B_RAIN
screen.fogRlhArid   = FOG_RAYLEIGH_R_ARID FOG_RAYLEIGH_G_ARID FOG_RAYLEIGH_B_ARID
screen.fogRlhSnowy  = FOG_RAYLEIGH_R_SNOWY FOG_RAYLEIGH_G_SNOWY FOG_RAYLEIGH_B_SNOWY
screen.fogRlhTaiga  = FOG_RAYLEIGH_R_TAIGA FOG_RAYLEIGH_G_TAIGA FOG_RAYLEIGH_B_TAIGA
screen.fogRlhJungle = FOG_RAYLEIGH_R_JUNGLE FOG_RAYLEIGH_G_JUNGLE FOG_RAYLEIGH_B_JUNGLE
screen.fogRlhSwamp  = FOG_RAYLEIGH_R_SWAMP FOG_RAYLEIGH_G_SWAMP FOG_RAYLEIGH_B_SWAMP

# Columns
screen.fogRlhNormal.columns = 1
screen.fogRlhRain.columns   = 1
screen.fogRlhArid.columns   = 1
screen.fogRlhSnowy.columns  = 1
screen.fogRlhTaiga.columns  = 1
screen.fogRlhJungle.columns = 1
screen.fogRlhSwamp.columns  = 1

# Sliders
sliders = TAAU_RENDER_SCALE CAS_INTENSITY VIGNETTE_INTENSITY PURKINJE_SHIFT_INTENSITY GRADE_BRIGHTNESS GRADE_CONTRAST GRADE_SATURATION GRADE_ORANGE_SAT_BOOST GRADE_TEAL_SAT_BOOST GRADE_GREEN_SAT_BOOST GRADE_GREEN_HUE_SHIFT shadowMapResolution shadowDistance sunPathRotation SHADOW_PENUMBRA_SCALE AUTO_EXPOSURE_BIAS AUTO_EXPOSURE_MIN AUTO_EXPOSURE_MAX AUTO_EXPOSURE_RATE_DIM_TO_BRIGHT AUTO_EXPOSURE_RATE_BRIGHT_TO_DIM MANUAL_EXPOSURE_VALUE HISTOGRAM_BINS HISTOGRAM_TARGET FOG_RAYLEIGH_DENSITY FOG_RAYLEIGH_R FOG_RAYLEIGH_G FOG_RAYLEIGH_B FOG_RAYLEIGH_DENSITY_RAIN FOG_RAYLEIGH_R_RAIN FOG_RAYLEIGH_G_RAIN FOG_RAYLEIGH_B_RAIN FOG_RAYLEIGH_DENSITY_ARID FOG_RAYLEIGH_R_ARID FOG_RAYLEIGH_G_ARID FOG_RAYLEIGH_B_ARID FOG_RAYLEIGH_DENSITY_SNOWY FOG_RAYLEIGH_R_SNOWY FOG_RAYLEIGH_G_SNOWY FOG_RAYLEIGH_B_SNOWY FOG_RAYLEIGH_DENSITY_TAIGA FOG_RAYLEIGH_R_TAIGA FOG_RAYLEIGH_G_TAIGA FOG_RAYLEIGH_B_TAIGA FOG_RAYLEIGH_DENSITY_JUNGLE FOG_RAYLEIGH_R_JUNGLE FOG_RAYLEIGH_G_JUNGLE FOG_RAYLEIGH_B_JUNGLE FOG_RAYLEIGH_DENSITY_SWAMP FOG_RAYLEIGH_R_SWAMP FOG_RAYLEIGH_G_SWAMP FOG_RAYLEIGH_B_SWAMP BLOOM_INTENSITY

#--------------------------------------------------------------------------------------------------#

clouds            = off
dynamicHandLight  = true
oldHandLight      = false
oldLighting       = false
separateAo        = true
underwaterOverlay = false
vignette          = false

#ifndef ENTITY_SHADOWS
shadowEntities = false
#endif

#ifndef BLOCK_ENTITY_SHADOWS
shadowBlockEntities = false
#endif

# -------------------
#   Program Toggles
# -------------------

program.world0/composite3.enabled  = TAAU
program.world0/composite5.enabled  = BLOOM
program.world0/composite6.enabled  = BLOOM
program.world0/composite7.enabled  = BLOOM
program.world0/composite8.enabled  = BLOOM
program.world0/composite9.enabled  = BLOOM
program.world0/composite10.enabled = BLOOM
program.world0/composite11.enabled = BLOOM
program.world0/composite12.enabled = BLOOM
program.world0/composite13.enabled = BLOOM
program.world0/composite15.enabled = FXAA

# ----------------
#   Buffer Flips
# ----------------

#ifdef VOLUMETRIC_FOG
flip.composite1.colortex5 = true
flip.composite1.colortex6 = true
#endif

#ifdef TAAU
flip.composite4.colortex6 = true
flip.composite4.colortex7 = true
#endif

#ifdef BLOOM
flip.composite10.colortex0 = false
#endif

# ----------------
#   Buffer Sizes
# ----------------

size.buffer.colortex4 = 192 108

# ------------
#   Blending
# ------------

alphaTest.gbuffers_armor_glint  = off
alphaTest.gbuffers_basic        = off
alphaTest.gbuffers_damagedblock = off
alphaTest.gbuffers_entities     = off
alphaTest.gbuffers_hand         = off
alphaTest.gbuffers_hand_water   = off
alphaTest.gbuffers_spidereyes   = off
alphaTest.gbuffers_terrain      = off
alphaTest.gbuffers_textured     = off
alphaTest.gbuffers_water        = off
alphaTest.shadow                = off

blend.gbuffers_armor_glint  = off
blend.gbuffers_basic        = off
blend.gbuffers_damagedblock = off
blend.gbuffers_entities     = off
blend.gbuffers_hand         = off
blend.gbuffers_hand_water   = off
blend.gbuffers_spidereyes   = off
blend.gbuffers_skytextured  = off
blend.gbuffers_terrain      = off
blend.gbuffers_textured     = off
blend.gbuffers_water        = off
blend.shadow                = off


blend.gbuffers_hand_water.colortex3 = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_textured.colortex3   = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO
blend.gbuffers_water.colortex3      = SRC_ALPHA ONE_MINUS_SRC_ALPHA ONE ZERO

# -------------------
#   Custom Textures
# -------------------

texture.noise = image/noise2D.png

# Atmospheric scattering LUT
texture.deferred.depthtex0 = image/atmosphere/scattering.dat TEXTURE_3D RGB16F 32 64 32 RGB HALF_FLOAT

# Atmospheric sun color LUT
texture.deferred.depthtex2  = image/atmosphere/sunColor.dat TEXTURE_2D RGB16F 256 64 RGB HALF_FLOAT
texture.composite.depthtex2 = image/atmosphere/sunColor.dat TEXTURE_2D RGB16F 256 64 RGB HALF_FLOAT

# 3D noise for clouds

# 3D noise for fog
texture.composite.colortex3 = image/worley3D.dat TEXTURE_3D R8 64 64 64 RED UNSIGNED_BYTE

# -------------------
#   Custom Uniforms
# -------------------

uniform.vec2.viewSize  = vec2(viewWidth, viewHeight)
uniform.vec2.texelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)

# TAA jitter offset using R2 sequence
# http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/
variable.float.jitterX = frac(1.3247179572 * frameCounter + 0.5) * 2.0 - 1.0
variable.float.jitterY = frac(1.7548776662 * frameCounter + 0.5) * 2.0 - 1.0
uniform.vec2.taaOffset = vec2(jitterX / viewWidth, jitterY / viewWidth)

# Time uniforms

# World age in seconds, repeating every 128 days. This is used for animating atmospherics
uniform.float.worldAge = ((worldDay % 128) * 24000.0 + worldTime) / 20.0

# Detect whether world age has drastically changed since the last frame
variable.float.worldAgeDelta = abs(worldAge - smooth(worldAge, 0.1, 0.1))
uniform.bool.worldAgeChanged = worldAgeDelta > 20.0

# https://www.desmos.com/calculator/kniltwna7u
uniform.float.timeNoon      = max(1.0 - pow(1.0 - worldTime / 6000.0, 4.0), 0.0)
uniform.float.timeMidnight  = max(1.0 - pow(3.0 - worldTime / 6000.0, 4.0), 0.0)
uniform.float.timeSunrise   = (1.0 - timeNoon) * (1.0 - timeMidnight) * if(between(worldTime, 6000, 18000), 0.0, 1.0)
uniform.float.timeSunset    = (1.0 - timeNoon) * (1.0 - timeMidnight) * if(between(worldTime, 6000, 18000), 1.0, 0.0)

# Biome uniforms

uniform.float.biomeCave        = smooth(clamp((63.0 - eyeAltitude) / (63.0 - 50.0), 0.0, 1.0) * (1.0 - eyeBrightness.y / 240.0), 5.0, 2.0)
uniform.float.biomeArid        = smooth(if(biome_category == CAT_DESERT || biome_category == CAT_MESA || biome_category == CAT_SAVANNA, 1.0, 0.0), 30, 30)
uniform.float.biomeSnowy       = smooth(if(biome_category == CAT_ICY, 1.0, 0.0), 30, 30)
uniform.float.biomeTaiga       = smooth(if(biome_category == CAT_TAIGA, 1.0, 0.0), 30, 30)
uniform.float.biomeJungle      = smooth(if(biome_category == CAT_JUNGLE, 1.0, 0.0), 30, 30)
uniform.float.biomeSwamp       = smooth(if(biome_category == CAT_SWAMP, 1.0, 0.0), 30, 30)
uniform.float.biomeTemperate   = 1.0 - biomeArid - biomeSnowy - biomeTaiga - biomeJungle - biomeSwamp
uniform.float.biomeMayRain     = smooth(if(biome_precipitation == PPT_RAIN, 1.0, 0.0), 30, 30)
uniform.float.biomeTemperature = smooth(temperature * 2.0 - 1.0, 1000, 1000)
uniform.float.biomeHumidity    = smooth(rainfall * 2.0 - 1.0, 1000, 1000)

# Shading uniforms

uniform.float.eyeBlocklight = smooth(eyeBrightness.x / 240.0, 1.0, 1.0)
uniform.float.eyeSkylight   = smooth(eyeBrightness.y / 240.0, 1.0, 1.0)

variable.float.viewUpDirNorm   = 1.0 / sqrt((upPosition.x * upPosition.x) + (upPosition.y * upPosition.y) + (upPosition.z * upPosition.z))
variable.float.viewUpDirX      = upPosition.x * viewUpDirNorm
variable.float.viewUpDirY      = upPosition.y * viewUpDirNorm
variable.float.viewUpDirZ      = upPosition.z * viewUpDirNorm
uniform.vec3.viewUpDir         = vec3(viewUpDirX, viewUpDirY, viewUpDirZ)

variable.float.viewSunDirNorm  = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
variable.float.viewSunDirX     = sunPosition.x * viewSunDirNorm
variable.float.viewSunDirY     = sunPosition.y * viewSunDirNorm
variable.float.viewSunDirZ     = sunPosition.z * viewSunDirNorm
uniform.vec3.viewSunDir        = vec3(viewSunDirX, viewSunDirY, viewSunDirZ)

variable.float.sunDirX              = gbufferModelViewInverse.0.0 * viewSunDirX + gbufferModelViewInverse.1.0 * viewSunDirY + gbufferModelViewInverse.2.0 * viewSunDirZ
variable.float.sunDirY              = gbufferModelViewInverse.0.1 * viewSunDirX + gbufferModelViewInverse.1.1 * viewSunDirY + gbufferModelViewInverse.2.1 * viewSunDirZ
variable.float.sunDirZ              = gbufferModelViewInverse.0.2 * viewSunDirX + gbufferModelViewInverse.1.2 * viewSunDirY + gbufferModelViewInverse.2.2 * viewSunDirZ
uniform.vec3.sunDir                 = vec3(sunDirX, sunDirY, sunDirZ)

variable.float.viewMoonDirNorm = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
variable.float.viewMoonDirX    = moonPosition.x * viewMoonDirNorm
variable.float.viewMoonDirY    = moonPosition.y * viewMoonDirNorm
variable.float.viewMoonDirZ    = moonPosition.z * viewMoonDirNorm
uniform.vec3.viewMoonDir       = vec3(viewMoonDirX, viewMoonDirY, viewMoonDirZ)

variable.float.moonDirX             = gbufferModelViewInverse.0.0 * viewMoonDirX + gbufferModelViewInverse.1.0 * viewMoonDirY + gbufferModelViewInverse.2.0 * viewMoonDirZ
variable.float.moonDirY             = gbufferModelViewInverse.0.1 * viewMoonDirX + gbufferModelViewInverse.1.1 * viewMoonDirY + gbufferModelViewInverse.2.1 * viewMoonDirZ
variable.float.moonDirZ             = gbufferModelViewInverse.0.2 * viewMoonDirX + gbufferModelViewInverse.1.2 * viewMoonDirY + gbufferModelViewInverse.2.2 * viewMoonDirZ
uniform.vec3.moonDir                = vec3(moonDirX, moonDirY, moonDirZ)

variable.float.viewLightDirX   = if(sunAngle < 0.5, viewSunDirX, viewMoonDirX)
variable.float.viewLightDirY   = if(sunAngle < 0.5, viewSunDirY, viewMoonDirY)
variable.float.viewLightDirZ   = if(sunAngle < 0.5, viewSunDirZ, viewMoonDirZ)
uniform.vec3.viewLightDir      = vec3(viewLightDirX, viewLightDirY, viewLightDirZ)

variable.float.lightDirX            = if(sunAngle < 0.5, sunDirX, moonDirX)
variable.float.lightDirY            = if(sunAngle < 0.5, sunDirY, moonDirY)
variable.float.lightDirZ            = if(sunAngle < 0.5, sunDirZ, moonDirZ)
uniform.vec3.lightDir               = vec3(lightDirX, lightDirY, lightDirZ)
